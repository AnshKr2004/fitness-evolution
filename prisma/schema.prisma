// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String     @id @default(cuid())
  email              String?    @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               Role       @default(TRAINER)
  name               String?
  gender             Gender?
  birthDate          DateTime?
  bio                String?
  emailNotifications Boolean    @default(true)
  smsNotifications   Boolean    @default(false)
  accounts           Account[]
  sessions           Session[]
  userSchedules      Schedule[] @relation("UserSchedules")
  trainerSchedules   Schedule[] @relation("TrainerSchedules")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Schedule {
  id                  String   @id @default(cuid())
  date                DateTime
  startTime           DateTime
  endTime             DateTime
  scheduleLink        String?
  scheduleSubject     String
  scheduleDescription String?
  status              String   @default("pending")
  userId              String
  trainerId           String
  user                User     @relation("UserSchedules", fields: [userId], references: [id])
  trainer             User     @relation("TrainerSchedules", fields: [trainerId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
  @@index([trainerId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  TRAINER
}

enum Gender {
  MALE
  FEMALE
}
